== Classic Presenter

Presenter Pattern for Rails Applications

== Installation

gem install classic_presenter

== Usage

* In your Gemfile you should set:

    gem 'classic_presenter'

* Create a simple ActiveRecord class that you want to present:

    class Product < ActiveRecord::Base
    end

* Create a presenter class inheriting from ClassicPresenter::Base:

    class ProductPresenter < ClassicPresenter::Base
      def display_name
          if context.user_logged_in?
            name
          else
            context.link_to name, context.product_path
          end
      end

      def display_description
        context.render "products/description", :product => self
      end
    end

* In your view, show.html.erb for example, you can present your Product object using this syntax:

    <% present ProductPresenter, @product do |presenter| %>
    <%= presenter.display_name %>
    <%= presenter.display_description %>
    <% end %>

== Additional details

* Inside of the presenter we have an access to the context. In the example above the context is the View(ActionView), then we can access any method like link_to, number_to_currency etc

* Since ClassicPresenter::Base is a Decorator, it implements the “transparent interface” requirements of the Gang of Four’s definition. This means that when we call some method in ProductPresenter, it will be delegated to the decorated object (in this case Product), like this:

    #products_controller.rb
    @product = ProductPresenter.new(Product.find(params[:id]))

    #show.html.erb
    <%= @product.name %>
    <%= @product.display_name %>





